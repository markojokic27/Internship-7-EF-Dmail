// <auto-generated />
using System;
using Dmail.Data.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Dmail.Data.Migrations
{
    [DbContext(typeof(DmailDBContext))]
    [Migration("20230109192026_a")]
    partial class a
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Dmail.Data.Entities.Models.Mail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("EventDuration")
                        .HasColumnType("interval");

                    b.Property<DateTime?>("EventStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.ToTable("Mails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Pozdrav, radi li sutra knjiznica?",
                            SenderId = 1,
                            SentAt = new DateTime(2022, 12, 1, 15, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Upit",
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            Content = "Kad cemo na kavu?",
                            SenderId = 1,
                            SentAt = new DateTime(2022, 11, 2, 20, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Kava",
                            Type = 0
                        },
                        new
                        {
                            Id = 3,
                            Content = "Kupio sam karte za oanj film o kojem smo pricali.",
                            SenderId = 2,
                            SentAt = new DateTime(2023, 1, 3, 15, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Kino",
                            Type = 0
                        },
                        new
                        {
                            Id = 4,
                            Content = "Sretan Bozic!!!",
                            SenderId = 2,
                            SentAt = new DateTime(2022, 12, 25, 7, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Cestitka",
                            Type = 0
                        },
                        new
                        {
                            Id = 5,
                            Content = "U privitku ti saljem dokumentaciju?",
                            SenderId = 3,
                            SentAt = new DateTime(2022, 12, 21, 15, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Dokumentacija",
                            Type = 0
                        },
                        new
                        {
                            Id = 6,
                            EventDuration = new TimeSpan(0, 4, 0, 0, 0),
                            EventStart = new DateTime(2023, 2, 1, 5, 0, 0, 0, DateTimeKind.Utc),
                            SenderId = 4,
                            SentAt = new DateTime(2022, 12, 1, 3, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Planinrenje",
                            Type = 1
                        },
                        new
                        {
                            Id = 7,
                            EventDuration = new TimeSpan(0, 3, 0, 0, 0),
                            EventStart = new DateTime(2023, 1, 13, 12, 0, 0, 0, DateTimeKind.Utc),
                            SenderId = 5,
                            SentAt = new DateTime(2022, 12, 1, 2, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Predavanje",
                            Type = 1
                        },
                        new
                        {
                            Id = 8,
                            EventDuration = new TimeSpan(0, 2, 0, 0, 0),
                            EventStart = new DateTime(2023, 2, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            SenderId = 1,
                            SentAt = new DateTime(2022, 12, 1, 2, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Nogometni termin",
                            Type = 1
                        },
                        new
                        {
                            Id = 9,
                            EventDuration = new TimeSpan(0, 8, 0, 0, 0),
                            EventStart = new DateTime(2022, 12, 23, 20, 0, 0, 0, DateTimeKind.Utc),
                            SenderId = 6,
                            SentAt = new DateTime(2022, 12, 10, 2, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Docek Nove godine",
                            Type = 1
                        },
                        new
                        {
                            Id = 10,
                            EventDuration = new TimeSpan(0, 4, 0, 0, 0),
                            EventStart = new DateTime(2023, 1, 18, 17, 0, 0, 0, DateTimeKind.Utc),
                            SenderId = 4,
                            SentAt = new DateTime(2023, 1, 5, 2, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Team Building",
                            Type = 1
                        });
                });

            modelBuilder.Entity("Dmail.Data.Entities.Models.Receiver", b =>
                {
                    b.Property<int>("MailId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("EventResponse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("MailStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("MailId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Receivers");

                    b.HasData(
                        new
                        {
                            MailId = 1,
                            UserId = 4,
                            EventResponse = 0,
                            MailStatus = 1
                        },
                        new
                        {
                            MailId = 2,
                            UserId = 5,
                            EventResponse = 0,
                            MailStatus = 1
                        },
                        new
                        {
                            MailId = 2,
                            UserId = 6,
                            EventResponse = 0,
                            MailStatus = 0
                        },
                        new
                        {
                            MailId = 3,
                            UserId = 1,
                            EventResponse = 0,
                            MailStatus = 1
                        },
                        new
                        {
                            MailId = 3,
                            UserId = 6,
                            EventResponse = 0,
                            MailStatus = 1
                        },
                        new
                        {
                            MailId = 4,
                            UserId = 1,
                            EventResponse = 0,
                            MailStatus = 0
                        },
                        new
                        {
                            MailId = 4,
                            UserId = 6,
                            EventResponse = 0,
                            MailStatus = 1
                        },
                        new
                        {
                            MailId = 4,
                            UserId = 5,
                            EventResponse = 0,
                            MailStatus = 1
                        },
                        new
                        {
                            MailId = 5,
                            UserId = 1,
                            EventResponse = 0,
                            MailStatus = 1
                        },
                        new
                        {
                            MailId = 5,
                            UserId = 5,
                            EventResponse = 0,
                            MailStatus = 1
                        },
                        new
                        {
                            MailId = 5,
                            UserId = 2,
                            EventResponse = 0,
                            MailStatus = 1
                        },
                        new
                        {
                            MailId = 6,
                            UserId = 2,
                            EventResponse = 0,
                            MailStatus = 0
                        },
                        new
                        {
                            MailId = 6,
                            UserId = 3,
                            EventResponse = 2,
                            MailStatus = 0
                        },
                        new
                        {
                            MailId = 7,
                            UserId = 1,
                            EventResponse = 1,
                            MailStatus = 0
                        },
                        new
                        {
                            MailId = 7,
                            UserId = 4,
                            EventResponse = 0,
                            MailStatus = 0
                        },
                        new
                        {
                            MailId = 8,
                            UserId = 4,
                            EventResponse = 2,
                            MailStatus = 0
                        },
                        new
                        {
                            MailId = 8,
                            UserId = 5,
                            EventResponse = 2,
                            MailStatus = 0
                        },
                        new
                        {
                            MailId = 8,
                            UserId = 2,
                            EventResponse = 1,
                            MailStatus = 0
                        },
                        new
                        {
                            MailId = 9,
                            UserId = 5,
                            EventResponse = 0,
                            MailStatus = 0
                        },
                        new
                        {
                            MailId = 9,
                            UserId = 3,
                            EventResponse = 2,
                            MailStatus = 0
                        },
                        new
                        {
                            MailId = 9,
                            UserId = 2,
                            EventResponse = 1,
                            MailStatus = 0
                        },
                        new
                        {
                            MailId = 10,
                            UserId = 3,
                            EventResponse = 0,
                            MailStatus = 0
                        },
                        new
                        {
                            MailId = 10,
                            UserId = 2,
                            EventResponse = 2,
                            MailStatus = 0
                        },
                        new
                        {
                            MailId = 10,
                            UserId = 6,
                            EventResponse = 0,
                            MailStatus = 0
                        });
                });

            modelBuilder.Entity("Dmail.Data.Entities.Models.Spam", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("BlockedUserId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "BlockedUserId");

                    b.HasIndex("BlockedUserId");

                    b.ToTable("Spam");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            BlockedUserId = 2
                        },
                        new
                        {
                            UserId = 1,
                            BlockedUserId = 3
                        },
                        new
                        {
                            UserId = 2,
                            BlockedUserId = 3
                        },
                        new
                        {
                            UserId = 3,
                            BlockedUserId = 4
                        },
                        new
                        {
                            UserId = 5,
                            BlockedUserId = 6
                        });
                });

            modelBuilder.Entity("Dmail.Data.Entities.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "ante@gmail.com",
                            Password = "ante"
                        },
                        new
                        {
                            Id = 2,
                            Email = "ivan@gmail.com",
                            Password = "ivan"
                        },
                        new
                        {
                            Id = 3,
                            Email = "marko@gmail.com",
                            Password = "marko"
                        },
                        new
                        {
                            Id = 4,
                            Email = "ana@gmail.com",
                            Password = "ana"
                        },
                        new
                        {
                            Id = 5,
                            Email = "ana@gmail.com",
                            Password = "ana"
                        },
                        new
                        {
                            Id = 6,
                            Email = "ivana@gmail.com",
                            Password = "ivana"
                        });
                });

            modelBuilder.Entity("Dmail.Data.Entities.Models.Mail", b =>
                {
                    b.HasOne("Dmail.Data.Entities.Models.User", "Sender")
                        .WithMany("Sented")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Dmail.Data.Entities.Models.Receiver", b =>
                {
                    b.HasOne("Dmail.Data.Entities.Models.Mail", "Mail")
                        .WithMany("Receivers")
                        .HasForeignKey("MailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dmail.Data.Entities.Models.User", "User")
                        .WithMany("Recieved")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mail");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dmail.Data.Entities.Models.Spam", b =>
                {
                    b.HasOne("Dmail.Data.Entities.Models.User", "BlockedUser")
                        .WithMany()
                        .HasForeignKey("BlockedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dmail.Data.Entities.Models.User", "User")
                        .WithMany("Spams")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlockedUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dmail.Data.Entities.Models.Mail", b =>
                {
                    b.Navigation("Receivers");
                });

            modelBuilder.Entity("Dmail.Data.Entities.Models.User", b =>
                {
                    b.Navigation("Recieved");

                    b.Navigation("Sented");

                    b.Navigation("Spams");
                });
#pragma warning restore 612, 618
        }
    }
}
